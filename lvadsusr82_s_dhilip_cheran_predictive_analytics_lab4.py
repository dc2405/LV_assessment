# -*- coding: utf-8 -*-
"""LVADSUSR82_S DHILIP CHERAN_predictive analytics_LAB4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SUc5kjJYw7O98OA0g1lWmg10g_bm9cvS
"""

import pandas as pd
from sklearn.ensemble import IsolationForest
from sklearn.metrics import classification_report
from sklearn.compose import ColumnTransformer
# Step 1: Read Data
data = pd.read_csv("/content/social_network.csv")

# Step 2: Data Preprocessing:
import pandas as pd
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline

data = pd.read_csv("/content/social_network.csv")

# Handling missing values
missing_values_cols = data.columns[data.isnull().any()]
missing_values_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='mean'))
])
preprocessor = ColumnTransformer(
    transformers=[
        ('missing_values', missing_values_transformer, missing_values_cols)
    ]
)
# Apply preprocessing pipeline
data_preprocessed = preprocessor.fit_transform(data)
data_preprocessed = pd.DataFrame(data_preprocessed, columns=data.columns)

# Handle outliers (if necessary)
# No specific outlier handling for anomaly detection, as outliers are the focus of detection
import pandas as pd
from sklearn.preprocessing import RobustScaler

data = pd.read_csv("/content/social_network.csv")

scaler = RobustScaler()

data_scaled = scaler.fit_transform(data.drop(columns=['target_column']))

data_scaled = pd.DataFrame(data_scaled, columns=data.columns[:-1])

scaler = StandardScaler()
data_scaled = scaler.fit_transform(data_preprocessed)
data.fillna(data.mean(), inplace=True)

# Step 3: Exploratory Data Analysis:

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Descriptive Statistics
print("Descriptive Statistics:")
print(data.describe())

# Pairplot
print("\nPairplot:")
sns.pairplot(data)
plt.title("Pairplot")
plt.show()

# Boxplot of Numerical Features
print("\nBoxplot of Numerical Features:")
plt.figure(figsize=(12, 8))
sns.boxplot(data=data, orient="h")
plt.title("Boxplot of Numerical Features")
plt.show()

# Heatmap
print("\nCorrelation Heatmap:")
plt.figure(figsize=(10, 8))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title("Correlation Heatmap")
plt.show()
print("Descriptive Statistics:")
print(data.describe())

print("\nShape of the Data:")
print(data.shape)

# Step 4: Model Training & Testing
contamination = 0.01
model = IsolationForest(contamination=contamination, random_state=42)
model.fit(data)

anomaly_scores = model.predict(data)

# Step 5: Model Evaluation Metrics
print("\nClassification Report:")
print(classification_report(anomaly_scores, [-1 if x == -1 else 1 for x in anomaly_scores]))