# -*- coding: utf-8 -*-
"""LVADSUSR82_SDHILIPCHERAN_LAB2_Predictive analytics_IA2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jg_NL6L3Kn1WwFc11dGxW6PjFenfvqqH
"""

# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt


retail_data = pd.read_csv(/content/Mall_Customers.csv)

# a. Data Exploration and Preprocessing
# Normalization
scaler = StandardScaler()
retail_data[['Age', 'Annual Income', 'Spending Score']] = scaler.fit_transform(retail_data[['Age', 'Annual Income', 'Spending Score']])

# Handling Missing Values
imputer = SimpleImputer(strategy='mean')
retail_data['Annual Income'] = imputer.fit_transform(retail_data[['Annual Income']])

# Feature Engineering
retail_data['Spending_to_Income_Ratio'] = retail_data['Spending Score'] / retail_data['Annual Income']

# b. Optimal Number of Clusters Determination
# Elbow Method
distortions = []
K = range(1, 10)
for k in K:
    kmeans = KMeans(n_clusters=k)
    kmeans.fit(retail_data[['Age', 'Annual Income', 'Spending Score']])
    distortions.append(kmeans.inertia_)
plt.figure(figsize=(10,5))
plt.plot(K, distortions, 'bx-')
plt.xlabel('k')
plt.ylabel('Distortion')
plt.title('Elbow Method to Determine Optimal k')
plt.show()

# Silhouette Score
sil_scores = []
for k in range(2, 10):
    kmeans = KMeans(n_clusters=k)
    kmeans.fit(retail_data[['Age', 'Annual Income', 'Spending Score']])
    labels = kmeans.labels_
    sil_scores.append(silhouette_score(retail_data[['Age', 'Annual Income', 'Spending Score']], labels))
plt.figure(figsize=(10,5))
plt.plot(range(2, 10), sil_scores, 'bx-')
plt.xlabel('Number of clusters')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Score Analysis')
plt.show()


# c. Clustering Algorithm Application
# Implementing K-Means clustering algorithm
kmeans = KMeans(n_clusters=5, random_state=42)
retail_data['Cluster'] = kmeans.fit_predict(retail_data[['Age', 'Annual Income', 'Spending Score']])

# d. Cluster Analysis
# Cluster Profiling
cluster_profile = retail_data.groupby('Cluster').mean()

# e. Strategy Development Based on Clusters

# Strategies for target marketing
marketing_strategies = {
    0: "Offer discounts on high-ticket items to encourage purchases from price-sensitive customers.",
    1: "Promote loyalty programs and personalized offers to frequent shoppers to enhance retention.",
    2: "Focus on showcasing new arrivals and trendy products to attract fashion-conscious customers.",
    3: "Provide educational content and workshops to engage with health-conscious customers.",
    4: "Create bundle deals and cross-selling opportunities for customers who tend to buy complementary products."
}

# Strategies for Customer Experience Improvement
experience_improvement = {
    0: "Streamline checkout process and improve website/app performance to cater to tech-savvy customers.",
    1: "Invest in staff training to ensure excellent customer service for high-spending customers.",
    2: "Enhance store ambiance and create interactive displays to appeal to experiential shoppers.",
    3: "Offer personalized recommendations and health-focused product lines for fitness-oriented customers.",
    4: "Optimize inventory management and ensure product availability for convenience-driven shoppers."
}

#Displaying strategies for each cluster
for cluster, strategy in marketing_strategies.items():
    print(f"Cluster {cluster} Marketing Strategy: {strategy}")

for cluster, strategy in experience_improvement.items():
    print(f"Cluster {cluster} Experience Improvement: {strategy}")

print("Cluster Profile:")
print(cluster_profile)