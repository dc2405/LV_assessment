# -*- coding: utf-8 -*-
"""LVADSUSR82_S DHILIP CHERAN_FINAL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qNjahQ363XASpLRUTaxURrh3E77tpVWL
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn
df=pd.read_excel("/Walmart_Dataset Python_Final_Assessment.xlsx")
dataset=pd.DataFrame(df)
print(dataset)


#1
import pandas as pd
df = pd.read_excel("/Walmart_Dataset Python_Final_Assessment.xlsx")

# To display basic information
print(df.info())

# To display basic statistics
print(df.describe())

# checking first few rows alone
print(df.head(100))

#2 Data Cleaning
# To check missing values in the dataset,after Detecting missing values
# We can either fill the missing values or drop them based on their need.
print(df.isnull().sum())

# Checking for duplicate entries
print(df.duplicated().sum())

# Drop duplicate entries
df.drop_duplicates(inplace=True)

#3 Descriptive Statistics

print(df.describe())

print(df.describe(include='object'))

#4 Data Visualization

import matplotlib.pyplot as plt
import seaborn as sns

# To form a Histogram
plt.hist(df['Sales'], bins=20, color='skyblue', edgecolor='black')
plt.xlabel('Sales')
plt.ylabel('Frequency')
plt.title('Distribution of Sales')
plt.show()

# To form a Scatter plot
plt.scatter(df['Sales'], df['Profit'], color='green')
plt.xlabel('Sales')
plt.ylabel('Profit')
plt.title('Sales vs Profit')
plt.show()

# To form a Box plot
sns.boxplot(x='Category', y='Sales', data=df)
plt.xticks(rotation=45)
plt.title('Boxplot of Sales by Category')
plt.show()

# To form a Bar chart
plt.figure(figsize=(10, 6))
df['Category'].value_counts().plot(kind='bar', color='orange')
plt.xlabel('Category')
plt.ylabel('Count')
plt.title('Count of Products in Each Category')
plt.show()

#5 Identifying Relationships in the dataset
# Correlation matrix
corr_matrix = df.corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

#6 Finding anomalies using boxplot

sns.boxplot(x=df['Profit'])
plt.title('Boxplot of Profit')
plt.show()

#anomalies can also be found using zscore method
from scipy import stats
z_scores = stats.zscore(df['Profit'])
outliers = df[(z_scores > 3) | (z_scores < -3)]
print("Outliers:", outliers)

#7 Data Discovery
#Trend Analysis:
#(i) Sales and profit trends over the years
df['Order Date'] = pd.to_datetime(df['Order Date'])
df['Year'] = df['Order Date'].dt.year

sales_trend = df.groupby('Year')['Sales'].sum()
profit_trend = df.groupby('Year')['Profit'].sum()

plt.plot(sales_trend.index, sales_trend.values, marker='o', linestyle='-', color='b', label='Sales')
plt.plot(profit_trend.index, profit_trend.values, marker='o', linestyle='-', color='r', label='Profit')
plt.xlabel('Year')
plt.ylabel('Amount')
plt.title('Sales and Profit Trends over the Years')
plt.legend()
plt.show()

#(ii) Product category with the most growth in sales
category_sales = df.groupby('Category')['Sales'].sum()
most_growth_category = category_sales.idxmax()
print("Category with most growth in sales:", most_growth_category)

#Customer Analysis:

#(i) Top 5 customers based on orders placed and total sales
top_customers = df.groupby('EmailID').agg({'Order ID': 'count', 'Sales': 'sum'}).nlargest(5, 'Order ID')
print("Top 5 customers:\n", top_customers)

#(ii) Repeat purchase behavior
df.sort_values(['EmailID', 'Order Date'], inplace=True)
df['Time_between_orders'] = df.groupby('EmailID')['Order Date'].diff().dt.days
avg_time_between_orders = df.groupby('EmailID')['Time_between_orders'].mean()
print("Average time between orders for each customer:\n", avg_time_between_orders)

#Comprehensive Analytics:
#(i)ANS:-Supply Chain Optimization: Analying the rate of sales to optimize inventory levels.
#Use order fulfillment data to identify major setbacks and improve efficiency.
df['Order Date'] = pd.to_datetime(df['Order Date'])
df['Ship Date'] = pd.to_datetime(df['Ship Date'])
df['Order_Processing_Time'] = (df['Ship Date'] - df['Order Date']).dt.days

slow_moving_products = df[df['Order_Processing_Time'] > 5]['Product Name'].unique()
print("Slow-moving products:\n", slow_moving_products)

avg_order_processing_time = df['Order_Processing_Time'].mean()
print("Average order processing time:", avg_order_processing_time)


#(ii)ANS:-Geographic Distribution Analysis: Throgh this, we can identify regions with the highest sales
#and tailor marketing strategies accordingly.
# We need to analyze factors that are influencing geographic distribution, such as demographics
#or local trends.
sales_by_geography = df.groupby('Geography')['Sales'].sum().sort_values(ascending=False)
print("Sales by geography:\n", sales_by_geography)

#(iii)ANS:-High-Value Customer Identification:
#Using RFM (Recency, Frequency, Monetary) analysis we can identify the high-value customers.
#We can offer personalized incentives or loyalty programs to increase customer retention.
recency = df.groupby('EmailID')['Order Date'].max()
frequency = df.groupby('EmailID')['Order Date'].count()
monetary_value = df.groupby('EmailID')['Sales'].sum()

rfm_table = pd.concat([recency, frequency, monetary_value], axis=1)
rfm_table.columns = ['Recency', 'Frequency', 'MonetaryValue']

pass#calculating RFM score

high_value_customers = rfm_table[rfm_table['RFM_Score'] >= 300]
print("High-value customers:\n", high_value_customers)